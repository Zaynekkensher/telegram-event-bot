from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import re
import json
from datetime import datetime
import os
import shlex
from event_db import add_event, get_events, delete_event

if not os.getenv("BOT_TOKEN"):
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

BOT_TOKEN = os.getenv("BOT_TOKEN")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === FSM –≥—Ä—É–ø–ø–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ===
class AddEvent(StatesGroup):
    date = State()
    time = State()
    city = State()
    type = State()
    place = State()
    description = State()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event")],
    ])

# === /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data == "add_event")
async def cb_add_event(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        '/–¥–æ–±–∞–≤–∏—Ç—å –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º "–ì–æ—Ä–æ–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è" "–ú–µ—Å—Ç–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–û–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"'
    )
    await callback.answer()

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
async def quick_add_event(message: Message):
    try:
        parts = shlex.split(message.text)
        if len(parts) < 7:
            raise ValueError
        _, date_str, time_str, *rest = parts
        city, ev_type, place, description = rest
    except ValueError:
        return await message.answer(
            "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω:\n"
            '/–¥–æ–±–∞–≤–∏—Ç—å –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º "–ì–æ—Ä–æ–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è" "–ú–µ—Å—Ç–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–û–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"'
        )

    if not is_valid_date(date_str):
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥")
    if not is_valid_time(time_str):
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: —á—á:–º–º")

    try:
        await add_event(
            message.chat.id, date_str, time_str, city, ev_type, place, description
        )
        await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except:
        return False

def is_valid_time(time_str):
    return bool(re.fullmatch(r"\d{2}:\d{2}", time_str)) and \
           0 <= int(time_str[:2]) < 24 and 0 <= int(time_str[3:]) < 60

@dp.callback_query(F.data == "list_events")
async def cb_list_events(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    now = datetime.now()
    events = await get_events(callback.message.chat.id)

    if not events:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        await callback.answer()
        return

    text = "<b>üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    for ev in events:
        dt = datetime.strptime(f"{ev['date']} {ev['time']}", "%d.%m.%Y %H:%M")
        block = (
            f"{ev['id']}. üìÖ <b>{ev['date']} {ev['time']}</b>\n"
            f"üè∑ {ev['type']} {ev['city']}\n"
            f"üèõ {ev['place']}\n"
            f"üìù {ev['description']}\n"
        )
        if dt < now:
            block = f"<i><span class='tg-spoiler'>{block}</span></i>"
        text += block + "\n"

    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "delete_event")
async def cb_delete(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    events = await get_events(chat_id)

    if not events:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        await callback.answer()
        return

    keyboard = []
    for ev in events:
        button = InlineKeyboardButton(
            text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {ev['id']} {ev['date']} {ev['time']} {ev['type']} {ev['city']}",
            callback_data=f"delete_{ev['id']}"
        )
        keyboard.append([button])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@dp.message()
async def delete_by_number(message: Message):
    if not message.text.isdigit():
        return

    event_id = int(message.text)
    await delete_event(message.chat.id, event_id)
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

@dp.callback_query(F.data.startswith("delete_"))
async def handle_delete_callback(callback: CallbackQuery):
    try:
        event_id = int(callback.data.split("_")[1])
        await delete_event(callback.message.chat.id, event_id)
        await callback.message.answer("üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await callback.answer()

import asyncio

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))