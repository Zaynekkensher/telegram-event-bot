from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
import re
import json
from datetime import datetime
import os
import shlex

# === üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather ===
BOT_TOKEN = "7882211754:AAEHyH5kpQoFNWVtQrc7cu-3512uwsJaEMc"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === FSM –≥—Ä—É–ø–ø–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ===
class AddEvent(StatesGroup):
    date = State()
    time = State()
    city = State()
    type = State()
    place = State()
    description = State()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", callback_data="list_events")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="delete_event")],
    ])

# === /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data == "add_event")
async def cb_add_event(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        '/–¥–æ–±–∞–≤–∏—Ç—å –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º "–ì–æ—Ä–æ–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è" "–ú–µ—Å—Ç–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–û–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"'
    )
    await callback.answer()

@dp.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
async def quick_add_event(message: Message):
    try:
        parts = shlex.split(message.text)
        if len(parts) < 7:
            raise ValueError
        _, date_str, time_str, *rest = parts
        city, ev_type, place, description = rest
    except ValueError:
        return await message.answer(
            "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω:\n"
            '/–¥–æ–±–∞–≤–∏—Ç—å –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º "–ì–æ—Ä–æ–¥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è" "–ú–µ—Å—Ç–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" "–û–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"'
        )

    if not is_valid_date(date_str):
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥")
    if not is_valid_time(time_str):
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç: —á—á:–º–º")

    chat_id = str(message.chat.id)
    data = load_data()
    if chat_id not in data:
        data[chat_id] = []
    data[chat_id].append({
        "date": date_str,
        "time": time_str,
        "city": city,
        "type": ev_type,
        "place": place,
        "description": description
    })
    save_data(data)

    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

def is_valid_date(date_str):
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except:
        return False

def is_valid_time(time_str):
    return bool(re.fullmatch(r"\d{2}:\d{2}", time_str)) and \
           0 <= int(time_str[:2]) < 24 and 0 <= int(time_str[3:]) < 60

def load_data():
    if not os.path.exists("data.json"):
        return {}
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@dp.callback_query(F.data == "list_events")
async def cb_list_events(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    now = datetime.now()
    data = load_data()
    events = data.get(chat_id, [])

    if not events:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        await callback.answer()
        return

    def parse_datetime(e):
        return datetime.strptime(f"{e['date']} {e['time']}", "%d.%m.%Y %H:%M")

    events.sort(key=parse_datetime)

    text = "<b>üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n"
    for ev in events:
        dt = parse_datetime(ev)
        block = (
            f"üìÖ <b>{ev['date']} {ev['time']}</b>\n"
            f"üè∑ {ev['type']} –≤ {ev['city']}\n"
            f"üèõ {ev['place']}\n"
            f"üìù {ev['description']}\n"
        )
        if dt < now:
            block = f"<i><span class='tg-spoiler'>{block}</span></i>"
        text += block + "\n"

    await callback.message.answer(text)
    await callback.answer()

@dp.callback_query(F.data == "delete_event")
async def cb_delete(callback: CallbackQuery):
    await callback.message.answer("üóë –í—ã –Ω–∞–∂–∞–ª–∏: –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    await callback.answer()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))